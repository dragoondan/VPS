#!/bin/bash
if [ $(id -u) -eq 0 ]
then
clear
else
echo -e "Ejecute el script como usuario \033[1;32mroot\033[0m"
exit
fi
if [ -d /etc/VpsPackdir ]
then
true
else
mkdir /etc/VpsPackdir
fi
if [ -d /etc/VpsPackdir/senha ]
then
true
else
mkdir /etc/VpsPackdir/senha
fi
if [ -d /etc/VpsPackdir/limite ]
then
true
else
mkdir /etc/VpsPackdir/limite
fi

function configurarsquid(){
clear
cat -n /etc/issue |grep 1 |cut -d' ' -f6,7,8 |sed 's/1//' |sed 's/	//' > /etc/so 
if [ -f /etc/lsb-release ]
then
sistema=$(cat /etc/lsb-release |grep "DISTRIB_DESCRIPTION" | awk -F = '{print $2}' |sed 's/"//g')
else
sistema=Null
fi
#echo -e "\033[1;31mEscriba la IP del servidor\033[0m"
#read -p ": " ip
ip=$(ip addr | grep 'state UP' -A2 | tail -n1 | awk '{print $2}' | cut -f1  -d'/')
echo -e "\033[1;31mLa IP del servidor es...\033[0m $ip"
read -p "\033[1;31mEscriba el nombre del dueno del servidor:\033[0m " dueno
echo "Presiona una tecla para continuar..."
read foo
clear
echo -e "\033[1;31m-----> \033[01;37mScript hecho por DragoonDan\033[0m"
echo -e "\033[1;31m-----> \033[01;37mSu sistema operativo:\033[1;31m $sistema"
echo -e "\033[1;31m-----> \033[01;37mSu IP:\033[1;31m $ip"
echo -e "\033[1;31m-----> \033[1;37mSQUID se ejecutara en el puerto:\033[1;31m 8080\033[0m"
echo -e "\033[1;31m-----> \033[1;37mSSH se ejecutara en el puerto: \033[1;31m4444\033[0m"
echo -e "\033[1;31m-----> \033[1;37mSSH se ejecutara en las IPs: \033[1;31m$ip, localhost, 127.0.0.1\033[0m"
echo -e "\033[1;31m-----> \033[1;37mHerramienta para agregar host:\033[1;31m addhost\033[0m"

function sshd_config(){ 
echo "# Package generated configuration file
# See the sshd_config(5) manpage for details

# What ports, IPs and protocols we listen for
Port 4444
# Use these options to restrict which interfaces/protocols sshd will bind to
#ListenAddress ::
#ListenAddress 0.0.0.0
Protocol 2
# HostKeys for protocol version 2
HostKey /etc/ssh/ssh_host_rsa_key
HostKey /etc/ssh/ssh_host_dsa_key
HostKey /etc/ssh/ssh_host_ecdsa_key
HostKey /etc/ssh/ssh_host_ed25519_key
#Privilege Separation is turned on for security
UsePrivilegeSeparation yes

# Lifetime and size of ephemeral version 1 server key
KeyRegenerationInterval 3600
ServerKeyBits 1024

# Logging
SyslogFacility AUTH
LogLevel INFO

# Authentication:
LoginGraceTime 30
PermitRootLogin yes
StrictModes yes

RSAAuthentication yes
PubkeyAuthentication yes
#AuthorizedKeysFile	%h/.ssh/authorized_keys

# Don't read the user's ~/.rhosts and ~/.shosts files
IgnoreRhosts yes
# For this to work you will also need host keys in /etc/ssh_known_hosts
RhostsRSAAuthentication no
# similar for protocol version 2
HostbasedAuthentication no
# Uncomment if you don't trust ~/.ssh/known_hosts for RhostsRSAAuthentication
#IgnoreUserKnownHosts yes

# To enable empty passwords, change to yes (NOT RECOMMENDED)
PermitEmptyPasswords no

# Change to yes to enable challenge-response passwords (beware issues with
# some PAM modules and threads)
ChallengeResponseAuthentication no

# Change to no to disable tunnelled clear text passwords
#PasswordAuthentication yes

# Kerberos options
#KerberosAuthentication no
#KerberosGetAFSToken no
#KerberosOrLocalPasswd yes
#KerberosTicketCleanup yes

# GSSAPI options
#GSSAPIAuthentication no
#GSSAPICleanupCredentials yes

X11Forwarding yes
X11DisplayOffset 10
PrintMotd no
PrintLastLog yes
TCPKeepAlive yes
#UseLogin no

#MaxStartups 10:30:60
#Banner /etc/issue.net

# Allow client to pass locale environment variables
AcceptEnv LANG LC_*

Subsystem sftp /usr/lib/openssh/sftp-server

# Set this to 'yes' to enable PAM authentication, account processing,
# and session processing. If this is enabled, PAM authentication will
# be allowed through the ChallengeResponseAuthentication and
# PasswordAuthentication.  Depending on your PAM configuration,
# PAM authentication via ChallengeResponseAuthentication may bypass
# the setting of "PermitRootLogin without-password".
# If you just want the PAM account and session checks to run without
# PAM authentication, then enable this but set PasswordAuthentication
# and ChallengeResponseAuthentication to 'no'.
UsePAM yes

UseDNS no

MaxAuthTries 3
MaxStartups 1
PasswordAuthentication yes
Compression yes
Banner /etc/bannerssh" > /etc/ssh/sshd_config
echo "<br><center><font color=red><b>*****************************</b></font><br><font color=red><b>*** SERVIDOR PREMIUM ***</b></font><br><font color=red><b>*****************************</b></font><br><font color=navy><b>&iexcl;Bienvenid@!</b></font><br><br><b>Si logras ver este mensaje quiere decir que te has conectado correctamente y puedes empezar a navegar.</b><br><br><b>Cualquier abuso o mal uso del servicio por parte del usuario puede llevar a la cancelaci&oacute;n del mismo sin previo aviso.</b><br><br><font color=purple><b>&iexcl;Disfruta!</b></font></center>" > /etc/bannerssh
}

function addihost(){ echo '#!/bin/bash
echo -e "\033[1;31mHost actualmente permitidos\n\n\033[1;32m$(cat /etc/payloads)\n\033[0m"
echo "Que host desea agregar?"
read -p ": " host
echo "$host" >> /etc/payloads
squid -k reconfigure > /dev/null 2> /dev/null
squid3 -k reconfigure > /dev/null 2> /dev/null
echo "$host agregado" ' > /bin/addhost
chmod a+x /bin/addhost
}
function removerhostf(){ echo '#!/bin/bash
echo -e "\033[1;31mHost actualmente permitidos\n\n\033[1;32m$(cat /etc/payloads)\n\033[0m"
echo -ne "\033[1;37mQue host desea eliminar?: \033[0m"
read host
hosts = $(cat /etc/payloads |grep -v $host)
echo "$hosts" > /etc/payloads
squid -k reconfigure >/dev/null 2>/dev/null
squid3 -k reconfigure >/dev/null 2>/dev/null
echo -e "\n\033[1;32mHost eliminado\033[0m"
' > /bin/removerhost
}
function payloads(){ echo ".claro.com.br
.claro.com.sv
.vivo.com.br
.ddivulga.com" > /etc/payloads
}

if cat /etc/so |grep -i ubuntu |grep 16 1> /dev/null 2> /dev/null ; then
echo -e "\033[1;37mConfigurando, espere...\033[0m"
apt-get update 1> /dev/null 2> /dev/null
apt-get install -y squid3 1> /dev/null 2> /dev/null

service apache2 stop 1> /dev/null 2> /dev/null
chattr -i /etc/ssh/sshd_config > /dev/null 2> /dev/null
sshd_config
service ssh restart 1> /dev/null 2> /dev/null

echo -e '#auth_param basic program /usr/lib/squid/basic_ncsa_auth /etc/squid/claves
http_port 8080' > /etc/squid/squid.conf
echo -e "visible_hostname $dueno
dns_nameservers 208.67.222.222 208.67.220.220

acl url1 dstdomain -i 127.0.0.1
acl url2 dstdomain -i localhost
acl url3 dstdomain -i $ip" >> /etc/squid/squid.conf
echo -e 'acl payload dstdomain -i "/etc/payloads"

http_access allow url1
http_access allow url2
http_access allow url3
http_access allow payload
http_access deny all

forwarded_for off
via off

follow_x_forwarded_for deny all
request_header_access From deny all
request_header_access Referer deny all
request_header_access User-Agent deny all
request_header_access X-Forwarded-For deny all' >> /etc/squid/squid.conf
addihost
removerhostf
payloads
touch /etc/squid/claves 1> /dev/null 2> /dev/null
chmod 600 /etc/squid/claves 1> /dev/null 2> /dev/null
chmod o+r /etc/squid/claves 1> /dev/null 2> /dev/null
service squid restart 1> /dev/null 2> /dev/null
apt-get install -y apache2-utils 1> /dev/null 2> /dev/null
apt-get install -y htop 1> /dev/null 2> /dev/null
apt-get install -y sarg 1> /dev/null 2> /dev/null
apt-get install -y apache2 1> /dev/null 2> /dev/null
echo 'AuthType Basic
AuthName "Acceso Restringido!"
AuthUserFile /var/lib/sarg/.htpasswd
require valid-user' > /var/lib/sarg/.htaccess
wget https://raw.githubusercontent.com/dragoondan/VPS/master/sarg.conf -O /etc/sarg/sarg.conf
wget https://raw.githubusercontent.com/dragoondan/VPS/master/apache2.conf -O /etc/apache2/apache2.conf
echo -e "\033[1;37mPara agregar nuevos host a SQUID proxy server ejecute el comando \033[1;32maddhost
\033[1;37mPara eliminar host ejecute el comando \033[1;32mremoverhost\033[1;37m
Los host estan almacenados en el achivo /etc/payloads\033[0m"
echo -e "\033[01;31mConfiguracion automatica terminada! \033[0m"
echo -e 'Recuerde hacer lo siguiente:
htpasswd -c /var/lib/sarg/.htpasswd admin
service apache2 restart

sarg -x

crontab -e
0 0,2,4,6,8,10,12,14,16,18,20,22 * * * /usr/bin/sarg -x

******** PASOS OPCIONALES ********
htpasswd /etc/squid3/claves usuario
nano /etc/squid3/squid.conf
acl usuarioacl proxy_auth usuario
http_access allow usarioacl
********************************

nano /etc/squid3/squid.conf
squid3 -k reconfigure'
exit 0
fi

if cat /etc/so |grep -i ubuntu 1> /dev/null 2> /dev/null ; then
echo -e "\033[1;37mConfigurando, espere...\033[0m"
apt-get update 1> /dev/null 2> /dev/null
apt-get install -y squid3 1> /dev/null 2> /dev/null

service apache2 stop 1> /dev/null 2> /dev/null
chattr -i /etc/ssh/sshd_config > /dev/null 2> /dev/null
sshd_config
service ssh restart 1> /dev/null 2> /dev/null

echo -e '#auth_param basic program /usr/lib/squid3/basic_ncsa_auth /etc/squid3/claves
http_port 8080
visible_hostname DanielVPS
dns_nameservers 208.67.222.222 208.67.220.220

acl url1 dstdomain -i 127.0.0.1
acl url2 dstdomain -i localhost' > /etc/squid3/squid.conf
echo -e "acl url3 dstdomain -i $ip" >> /etc/squid3/squid.conf
echo -e 'acl payload dstdomain -i "/etc/payloads"

http_access allow url1
http_access allow url2
http_access allow url3
http_access allow payload
http_access deny all

forwarded_for off
via off

follow_x_forwarded_for deny all
request_header_access From deny all
request_header_access Referer deny all
request_header_access User-Agent deny all
request_header_access X-Forwarded-For deny all' >> /etc/squid3/squid.conf
payloads
addihost
removerhostf
touch /etc/squid3/claves 1> /dev/null 2> /dev/null
chmod 600 /etc/squid3/claves 1> /dev/null 2> /dev/null
chmod o+r /etc/squid3/claves 1> /dev/null 2> /dev/null
service squid3 restart 1> /dev/null 2> /dev/null
apt-get install -y apache2-utils 1> /dev/null 2> /dev/null
apt-get install -y htop 1> /dev/null 2> /dev/null
apt-get install -y sarg 1> /dev/null 2> /dev/null
apt-get install -y apache2 1> /dev/null 2> /dev/null
echo 'AuthType Basic
AuthName "Acceso Restringido!"
AuthUserFile /var/lib/sarg/.htpasswd
require valid-user' > /var/lib/sarg/.htaccess
echo -e "\033[1;37mPara agregar nuevos host a SQUID proxy server ejecute el comando \033[1;32maddhost
\033[1;37mPara eliminar host ejecute el comando \033[1;32mremoverhost\033[1;37m
Los host estan almacenados en el achivo /etc/payloads\033[0m"
echo -e "\033[01;31mConfiguracion automatica terminada! \033[0m"
echo -e 'Recuerde hacer lo siguiente:
nano /etc/sarg/sarg.conf
htpasswd -c /var/lib/sarg/.htpasswd admin

nano /etc/apache2/apache2.conf
#Acceso a SARG
<Directory /var/www/html/reportessarg>
Options -Indexes +FollowSymLinks +Includes
AllowOverride AuthConfig
#Autenticacion de usuario
AuthName "Reporte de Accesos a internet de la Red"
AuthType Basic
AuthUserFile /var/lib/sarg/.htpasswd
require valid-user
Order allow,deny
Allow from all
</Directory>

service apache2 restart
sarg -x
crontab -e
0 0,2,4,6,8,10,12,14,16,18,20,22 * * * /usr/bin/sarg -x

htpasswd /etc/squid3/claves usuario
nano /etc/squid3/squid.conf
acl usuarioacl proxy_auth usuario
http_access allow usarioacl

squid3 -k reconfigure'
exit 0
fi

if cat /etc/so |grep -i centos 1> /dev/null 2> /dev/null ; then
echo -e "\033[01;37mConfigurando, espere...\033[0m"
yum -y update 1> /dev/null 2> /dev/null
yum install -y squid 1> /dev/null 2> /dev/null

service httpd stop 1> /dev/null 2> /dev/null
chattr -i /etc/ssh/sshd_config > /dev/null 2> /dev/null
sshd_config
service sshd restart 1> /dev/null 2> /dev/null

echo -e '#auth_param basic program /usr/lib/squid/basic_ncsa_auth /etc/squid/claves
http_port 8080
visible_hostname DanielVPS
dns_nameservers 208.67.222.222 208.67.220.220

acl url1 dstdomain -i 127.0.0.1
acl url2 dstdomain -i localhost' > /etc/squid/squid.conf
echo -e "acl url3 dstdomain -i $ip" >> /etc/squid/squid.conf
echo -e 'acl payload dstdomain -i "/etc/payloads"

http_access allow url1
http_access allow url2
http_access allow url3
http_access allow payload
http_access deny all

forwarded_for off
via off

follow_x_forwarded_for deny all
request_header_access From deny all
request_header_access Referer deny all
request_header_access User-Agent deny all
request_header_access X-Forwarded-For deny all' >> /etc/squid/squid.conf
payloads
addihost
removerhostf
touch /etc/squid/claves 1> /dev/null 2> /dev/null
chmod 600 /etc/squid/claves 1> /dev/null 2> /dev/null
chmod o+r /etc/squid/claves 1> /dev/null 2> /dev/null
service squid restart 1> /dev/null 2> /dev/null
yum install -y apache2-utils 1> /dev/null 2> /dev/null
yum install -y htop 1> /dev/null 2> /dev/null
yum install -y sarg 1> /dev/null 2> /dev/null
yum install -y apache2 1> /dev/null 2> /dev/null
echo 'AuthType Basic
AuthName "Acceso Restringido!"
AuthUserFile /var/lib/sarg/.htpasswd
require valid-user' > /var/lib/sarg/.htaccess
echo -e "\033[1;37mPara agregar nuevos host a SQUID proxy server ejecute el comando \033[1;32maddhost
\033[1;37mPara eliminar host ejecute el comando \033[1;32mremoverhost\033[1;37m
Los host estan almacenados en el achivo /etc/payloads\033[0m"
echo -e "\033[01;31mConfiguracion automatica terminada! \033[0m"
echo -e 'Recuerde hacer lo siguiente:
nano /etc/sarg/sarg.conf
htpasswd -c /var/lib/sarg/.htpasswd admin

nano /etc/apache2/apache2.conf
#Acceso a SARG
<Directory /var/www/html/reportessarg>
Options -Indexes +FollowSymLinks +Includes
AllowOverride AuthConfig
#Autenticacion de usuario
AuthName "Reporte de Accesos a internet de la Red"
AuthType Basic
AuthUserFile /var/lib/sarg/.htpasswd
require valid-user
Order allow,deny
Allow from all
</Directory>

service apache2 restart
sarg -x
crontab -e
0 0,2,4,6,8,10,12,14,16,18,20,22 * * * /usr/bin/sarg -x

htpasswd /etc/squid3/claves usuario
nano /etc/squid3/squid.conf
acl usuarioacl proxy_auth usuario
http_access allow usarioacl

squid3 -k reconfigure'
exit
fi

if cat /etc/so |grep -i debian 1> /dev/null 2> /dev/null ; then
echo -e "\033[01;37mConfigurando, espere...\033[0m"
apt-get update 1> /dev/null 2> /dev/null
apt-get install -y squid3 1> /dev/null 2> /dev/null
service apache2 stop 1> /dev/null 2> /dev/null
chattr -i /etc/ssh/sshd_config > /dev/null 2> /dev/null
sshd_config

service ssh restart 1> /dev/null 2> /dev/null

echo -e '#auth_param basic program /usr/lib/squid3/basic_ncsa_auth /etc/squid3/claves
http_port 8080
visible_hostname DanielVPS
dns_nameservers 208.67.222.222 208.67.220.220

acl url1 dstdomain -i 127.0.0.1
acl url2 dstdomain -i localhost' > /etc/squid3/squid.conf
echo -e "acl url3 dstdomain -i $ip" >> /etc/squid3/squid.conf
echo -e 'acl payload dstdomain -i "/etc/payloads"

http_access allow url1
http_access allow url2
http_access allow url3
http_access allow payload
http_access deny all

forwarded_for off
via off

follow_x_forwarded_for deny all
request_header_access From deny all
request_header_access Referer deny all
request_header_access User-Agent deny all
request_header_access X-Forwarded-For deny all' >> /etc/squid3/squid.conf
payloads
addihost
removerhostf
touch /etc/squid/claves 1> /dev/null 2> /dev/null
chmod 600 /etc/squid/claves 1> /dev/null 2> /dev/null
chmod o+r /etc/squid/claves 1> /dev/null 2> /dev/null
service squid3 restart 1> /dev/null 2> /dev/null
apt-get install -y apache2-utils 1> /dev/null 2> /dev/null
apt-get install -y htop 1> /dev/null 2> /dev/null
apt-get install -y sarg 1> /dev/null 2> /dev/null
apt-get install -y apache2 1> /dev/null 2> /dev/null
echo 'AuthType Basic
AuthName "Acceso Restringido!"
AuthUserFile /var/lib/sarg/.htpasswd
require valid-user' > /var/lib/sarg/.htaccess
echo -e "\033[1;37mPara agregar nuevos host a SQUID proxy server ejecute el comando \033[1;32maddhost
\033[1;37mPara eliminar host ejecute el comando \033[1;32mremoverhost\033[1;37m
Los host estan almacenados en el achivo /etc/payloads\033[0m"
echo -e "\033[01;31mConfiguracion automatica terminada! \033[0m"
echo -e 'Recuerde hacer lo siguiente:
nano /etc/sarg/sarg.conf
htpasswd -c /var/lib/sarg/.htpasswd admin

nano /etc/apache2/apache2.conf
#Acceso a SARG
<Directory /var/www/html/reportessarg>
Options -Indexes +FollowSymLinks +Includes
AllowOverride AuthConfig
#Autenticacion de usuario
AuthName "Reporte de Accesos a internet de la Red"
AuthType Basic
AuthUserFile /var/lib/sarg/.htpasswd
require valid-user
Order allow,deny
Allow from all
</Directory>

service apache2 restart
sarg -x
crontab -e
0 0,2,4,6,8,10,12,14,16,18,20,22 * * * /usr/bin/sarg -x

htpasswd /etc/squid3/claves usuario
nano /etc/squid3/squid.conf
acl usuarioacl proxy_auth usuario
http_access allow usarioacl

squid3 -k reconfigure'
exit 0
fi

if cat /etc/issue |grep -i kernel 1> /dev/null 2> /dev/null ; then
echo -e "\033[01;31mConfigurando, espere...\033[0m"
yum -y update 1> /dev/null 2> /dev/null
yum install -y squid 1> /dev/null 2> /dev/null

service httpd stop 1> /dev/null 2> /dev/null
chattr -i /etc/ssh/sshd_config > /dev/null 2> /dev/null
sshd_config
service sshd restart 1> /dev/null 2> /dev/null

echo -e '#auth_param basic program /usr/lib/squid/basic_ncsa_auth /etc/squid/claves
http_port 8080
visible_hostname DanielVPS
dns_nameservers 208.67.222.222 208.67.220.220

acl url1 dstdomain -i 127.0.0.1
acl url2 dstdomain -i localhost' > /etc/squid/squid.conf
echo -e "acl url3 dstdomain -i $ip" >> /etc/squid/squid.conf
echo -e 'acl payload dstdomain -i "/etc/payloads"

http_access allow url1
http_access allow url2
http_access allow url3
http_access allow payload
http_access deny all

forwarded_for off
via off

follow_x_forwarded_for deny all
request_header_access From deny all
request_header_access Referer deny all
request_header_access User-Agent deny all
request_header_access X-Forwarded-For deny all' >> /etc/squid/squid.conf
payloads
addihost
removerhostf
touch /etc/squid/claves 1> /dev/null 2> /dev/null
chmod 600 /etc/squid/claves 1> /dev/null 2> /dev/null
chmod o+r /etc/squid/claves 1> /dev/null 2> /dev/null
service squid restart 1> /dev/null 2> /dev/null
yum install -y apache2-utils 1> /dev/null 2> /dev/null
yum install -y htop 1> /dev/null 2> /dev/null
yum install -y sarg 1> /dev/null 2> /dev/null
yum install -y apache2 1> /dev/null 2> /dev/null
echo 'AuthType Basic
AuthName "Acceso Restringido!"
AuthUserFile /var/lib/sarg/.htpasswd
require valid-user' > /var/lib/sarg/.htaccess
echo -e "\033[1;37mPara agregar nuevos host a SQUID proxy server ejecute el comando \033[1;32maddhost
\033[1;37mPara eliminar host ejecute el comando \033[1;32mremoverhost\033[1;37m
Los host estan almacenados en el achivo /etc/payloads\033[0m"
echo -e "\033[01;31mConfiguracion automatica terminada! \033[0m"
echo -e 'Recuerde hacer lo siguiente:
nano /etc/sarg/sarg.conf
htpasswd -c /var/lib/sarg/.htpasswd admin

nano /etc/apache2/apache2.conf
#Acceso a SARG
<Directory /var/www/html/reportessarg>
Options -Indexes +FollowSymLinks +Includes
AllowOverride AuthConfig
#Autenticacion de usuario
AuthName "Reporte de Accesos a internet de la Red"
AuthType Basic
AuthUserFile /var/lib/sarg/.htpasswd
require valid-user
Order allow,deny
Allow from all
</Directory>

service apache2 restart
sarg -x
crontab -e
0 0,2,4,6,8,10,12,14,16,18,20,22 * * * /usr/bin/sarg -x

htpasswd /etc/squid3/claves usuario
nano /etc/squid3/squid.conf
acl usuarioacl proxy_auth usuario
http_access allow usarioacl

squid3 -k reconfigure'
exit
fi

echo -e "\033[01;31mConfigurando, espere...\033[0m"
yum -y update 1> /dev/null 2> /dev/null
yum install -y squid 1> /dev/null 2> /dev/null
apt-get update > /dev/null 2> /dev/null
apt-get install -y squid3 > /dev/null 2>/dev/null
service httpd stop 1> /dev/null 2> /dev/null
service apache2 stop >/dev/null 2> /dev/null
chattr -i /etc/ssh/sshd_config > /dev/null 2> /dev/null
sshd_config
service sshd restart 1> /dev/null 2> /dev/null
service ssh restart > /dev/null 2> /dev/null
echo "http_port 80
http_port 8080
http_port 8799
http_port 3128
visible_hostname VpsPack
acl ip dstdomain $ip
http_access allow ip" > /etc/squid*/squid.conf
echo 'acl accept dstdomain -i "/etc/payloads"
http_access allow accept
acl local dstdomain localhost
http_access allow local
acl iplocal dstdomain 127.0.0.1
http_access allow iplocal
http_access deny all' >> /etc/squid*/squid.conf
payloads
service squid restart 1> /dev/null 2> /dev/null
service squid3 restart > /dev/null 2> /dev/null
addihost
removerhostf
echo -e "\033[1;37mPara adicionar novos hosts ao squid execute o comando \033[1;32maddhost
\033[1;37mPara remover execute o comando \033[1;32mremoverhost\033[1;37m
Os hosts ficam no arquivo /etc/payloads\033[0m"
echo -e "\033[01;31mTudo terminado crie um usuario e teste !! \033[0m"
}
function sistemadetalhes(){
if [ -f /proc/cpuinfo ]
then
echo -e "\n\033[1;30mProcesador\033[0m"
modelo=$(cat /proc/cpuinfo |grep "model name" |uniq |awk -F : {'print $2'})
cpucores=$(cat /proc/cpuinfo |grep "cpu cores" |uniq |awk -F : {'print $2'})
cache=$(cat /proc/cpuinfo |grep "cache size" |uniq |awk -F : {'print $2'})
echo -e "\033[1;32mModelo:\033[0m$modelo"
echo -e "\033[1;32mNucleos:\033[0m$cpucores"
echo -e "\033[1;32mMemoria Cache:\033[0m$cache"
echo -e "\033[1;32mArquitectura: \033[0m$(uname -p)"
else
echo -e "\033[1;30mProcesador\033[0m"
echo "No se pudo encontrar /proc/cpuinfo"
fi
if [ -f /etc/lsb-release ]
then
echo -e "\n\033[1;30mSistema Operativo\033[0m"
name=$(cat /etc/lsb-release |grep DESCRIPTION |awk -F = {'print $2'})
codename=$(cat /etc/lsb-release |grep CODENAME |awk -F = {'print $2'})
echo -e "\033[1;32mNombre: \033[0m$name"
echo -e "\033[1;32mNombre clave: \033[0m$codename"
echo -e "\033[1;32mKernel: \033[0m$(uname -s)"
echo -e "\033[1;32mVersion de Kernel: \033[0m$(uname -r)"
if [ -f /etc/os-release ]
then
devlike=$(cat /etc/os-release |grep LIKE |awk -F = {'print $2'})
echo -e "\033[1;32mSistema operativo derivado de: \033[0m$devlike"
fi
else
echo -e "\n\033[1;30mSistema Operativo\033[0m"
echo "No se pudo encontrar /etc/lsb-release"
fi
if free 1>/dev/null 2>/dev/null
then
echo -e "\n\033[1;30mMemoria RAM\033[0m"
echo -e "\033[1;32mTotal: \033[0m$(free -m |grep -i mem |awk {'print $2'}) MB | $(( $(free -m |grep -i mem |awk {'print $2'}) / 1024 )) GB"
echo -e "\033[1;32mEn uso: \033[0m$(free -m |grep -i mem |awk {'print $3'}) MB | $(( $(free -m |grep -i mem |awk {'print $3'}) / 1024 )) GB"
echo -e "\033[1;32mLibre: \033[0m$(free -m |grep -i mem |awk {'print $4'}) MB | $(( $(free -m |grep -i mem |awk {'print $4'}) / 1024 )) GB"
echo -e "\n\033[1;30mSwap\033[0m"
echo -e "\033[1;32mTotal: \033[0m$(free -m |grep -i swap |awk {'print $2'}) MB | $(( $(free -m |grep -i swap |awk {'print $2'}) / 1024 )) GB"
echo -e "\033[1;32mEn uso: \033[0m$(free -m |grep -i swap |awk {'print $3'}) MB | $(( $(free -m |grep -i swap |awk {'print $3'}) / 1024 )) GB"
echo -e "\033[1;32mLibre: \033[0m$(free -m |grep -i swap |awk {'print $4'}) MB | $(( $(free -m |grep -i swap |awk {'print $4'}) / 1024 )) GB"
else
echo -e "\n\033[1;30mMemoria RAM\033[0m"
echo "No se pudo obtener informacion sobre la memoria RAM"
fi
}
function monitorar(){
clear
echo -e "\033[1;37m -------------------------------------------------------\033[0m"
echo -e " \033[47;30m   Usuario                :               Conexiones   \033[0m"
echo -e "\033[1;37m -------------------------------------------------------\033[0m"
for usur in `awk -F : '$3 > 900 { print $1 }' /etc/passwd |grep -v "nobody" |grep -vi polkitd |grep -vi systemd-[a-z] |grep -vi systemd-[0-9] |sort`; do
if [ -f /etc/VpsPackdir/limite/$usur ]; then
limite=$(cat -n /etc/VpsPackdir/limite/$usur |awk '$1 = 1 {print $2}')
else
limite=null
fi
usurnum="$(ps -u $usur |grep sshd |wc -l)\033[1;30m/\033[1;33m$limite"
echo -e "\033[1;33m    $(printf '%-41s%s' $usur $usurnum) \033[0m"
echo -e "\033[1;37m -------------------------------------------------------\033[0m"
done
}
function removerexpirados(){
clear
echo -e "         \033[1;33mEliminar usuarios expirados\033[0m"
datahoje=$(date +%s)
for user in $(cat /etc/passwd |grep -v "nobody" |awk -F : '$3 > 900 {print $1}')
do
dataexp=$(chage -l $user |grep "Account expires" |awk -F : '{print $2}')
if [[ $dataexp == ' never' ]]; then
id > /dev/null 2>/dev/null
else
dataexpn=$(date -d"$dataexp" '+%d/%m/%Y')
dataexpnum=$(date '+%s' -d"$dataexp")
fi
if [[ $dataexpnum < $datahoje ]]; then
printf "\033[1;31m"
printf '%-41s' $user
printf "\033[0m"
echo "Los usuarios expirados fueron eliminados"
kill $(ps -u $user |awk '{print $1}') >/dev/null 2>/dev/null ; userdel $user
else
printf "\033[1;32m"
printf '%-41s' $user
printf "\033[0m"
echo $dataexpn
fi
done
}
function criarusuarioteste(){
mkdir /etc/usuariosteste 1>/dev/null 2>/dev/null
echo -e "   Usuarios de prueba"
for testus in $(ls /etc/usuariosteste |sort |sed 's/.sh//g')
do
echo "$testus"
done
printf "\n"
printf "Nombre del nuevo usuario: "; read nome
printf "Contrasena del usuario: "; read pass
echo -e "\nUse s = segundos, m = minutos, h = horas y d = dias Ejemplo: 14s"
printf "Escriba el tiempo que el usuario $nome debe estar activo: ";read tempoin
tempo=$(echo "$tempoin" |sed 's/ //g')
useradd -M -s /bin/false $nome
(echo $pass;echo $pass) |passwd $nome 1>/dev/null 2>/dev/null
echo "#!/bin/bash
sleep $tempo
kill"' $(ps -u '"$nome |awk '{print"' $1'"}') 1>/dev/null 2>/dev/null
userdel --force $nome
rm -rf /etc/usuariosteste/$nome.sh
exit" > /etc/usuariosteste/$nome.sh
echo -e "Usuario: $nome
Contrasena: $pass
Valido por: $tempo\n
Despues de que el tiempo caduque el usuario sera desconectado y borrado."
bash /etc/usuariosteste/$nome.sh &
exit
}
function badvpn_install(){
wget https://raw.githubusercontent.com/dragoondan/VPS/master/badvpn.sh && bash badvpn.sh
}
function removerlimite(){
echo -ne "\033[1;32mEscriba el usuario para quitar el limite: \033[0m"
read user
cronsemuser=$(cat /etc/crontab |grep -v "#$user#")
echo "$cronsemuser" > /etc/crontab
rm -rf /etc/VpsPackdir/limite/$user 2>/dev/null
rm -rf /etc/VpsPackdir/limite/$user.sh 2>/dev/null
pids=$(ps x |grep "#$user#" |awk {'print $1'})
kill $pids 2>/dev/null
kill "$pids" 2>/dev/null
kill -9 `ps x |grep "#$user#" |awk {'print $1'}` 2>/dev/null
kill `ps x |grep "#$user#" |awk {'print $1'}` 2>/dev/null
echo -e "\033[1;37mUsuario: $user, limite eliminado\033[0m"
}
function backup_de_usuarios(){
clear
echo -e "\033[1;37mHaciendo respaldo de los usuarios...\033[0m"
for user in `awk -F : '$3 > 900 { print $1 }' /etc/passwd |grep -v "nobody" |grep -vi polkitd |grep -vi systemd-[a-z] |grep -vi systemd-[0-9]`
do
if [ -e /etc/VpsPackdir/senha/$user ]
then
pass=$(cat /etc/VpsPackdir/senha/$user)
else
echo -e "\033[1;31mNo se pudo obtener la contrasena del usuario\033[1;37m ($user)"
read -p "Introduzca la contrasena manualmente o presione ENTER: " pass
fi

if [ -e /etc/VpsPackdir/limite/$user ]
then
limite=$(cat /etc/VpsPackdir/limite/$user)
echo "$user:$pass:$limite" >> /etc/VpsPackdir/backup
echo -e "\033[1;37mUser $user Backup [\033[1;31mOK\033[1;37m]\033[0m"
else
echo "$user:$pass" >> /etc/VpsPackdir/backup
echo -e "\033[1;37mUser $user Backup [\033[1;31mOK\033[1;37m]\033[0m"
fi
done
echo " "
echo -e "\033[1;31mRespaldo terminado!\033[0m"
echo " "
echo -e "\033[1;37mEl respaldo se encuentra en el archivo \033[1;31m /etc/VpsPackdir/backup \033[1;37m
Guardelos para una futura restauracion\033[0m"
}
function mudarnome(){
printf "Escriba el usuario que desea cambiar el nombre: "; read user
if cat /etc/passwd |grep $user: >/dev/null 2>/dev/null
then
printf ""
else
echo "El usuario no existe"
exit
fi
printf "Escriba el nuevo usuario para $user: "; read nome
usermod -l $nome $user 1>/dev/null 2>/dev/null
echo -e "\nUsuario: $user, Nuevo usuario: $nome."
exit
}
function firewallblock(){
read -p "Escriba la IP del VPS: " ip
echo Configurando...
sleep 1
iptables -P INPUT DROP
iptables -P OUTPUT DROP
iptables -P FORWARD DROP
iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
iptables -A OUTPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
iptables -A FORWARD -m state --state ESTABLISHED,RELATED -j ACCEPT
iptables -t filter -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT
iptables -A OUTPUT -p tcp -d $ip --dport 443 -m state --state NEW -j ACCEPT
iptables -A OUTPUT -p tcp -d $ip --dport 80 -m state --state NEW -j ACCEPT
iptables -A OUTPUT -p tcp --dport 53 -m state --state NEW -j ACCEPT
iptables -A OUTPUT -p udp --dport 53 -m state --state NEW -j ACCEPT
iptables -A OUTPUT -p tcp --dport 67 -m state --state NEW -j ACCEPT
iptables -A OUTPUT -p udp --dport 67 -m state --state NEW -j ACCEPT
iptables -A INPUT -p tcp --dport 22 -j ACCEPT
iptables -A INPUT -p tcp --dport 443 -j ACCEPT
iptables -A OUTPUT -p tcp --dport 22 -j ACCEPT
iptables -A OUTPUT -p tcp --dport 443 -j ACCEPT
iptables -A INPUT -p tcp --dport 8080 -j ACCEPT
iptables -A INPUT -p tcp --dport 80 -j ACCEPT
iptables -A OUTPUT -p tcp --dport 8080 -j ACCEPT
iptables -A OUTPUT -p tcp --dport 80 -j ACCEPT
iptables -A FORWARD -p tcp --dport 8080 -j ACCEPT
iptables -A FORWARD -p tcp --dport 80 -j ACCEPT
iptables -A INPUT -p icmp --icmp-type echo-request -j DROP
iptables -A INPUT -p tcp --dport 10000 -j ACCEPT
iptables -A OUTPUT -p tcp --dport 10000 -j ACCEPT
echo -e "\033[1;37mFirewall modificado
Puertos 443 22 8080 80
Bloqueo ICMP
Bloqueo Torrent\033[0m"
}
function resetfirewall(){
iptables -F
iptables -X
iptables -t mangle -F
iptables -t mangle -X
iptables -t nat -F
iptables -t nat -X
iptables -t filter -F
iptables -t filter -X
echo "Reglas del firewall reiniciadas"
}
function detalhes_usuarios(){
clear

echo -e "\033[1;30m----------------------------------------------------------------------\033[0m"
echo -e "\033[1;37m Usuario            Contrasena            Fecha de expiracion        Logins \033[0m"
echo -e "\033[1;30m----------------------------------------------------------------------\033[0m"
for users in `awk -F : '$3 > 900 { print $1 }' /etc/passwd |sort |grep -v "nobody" |grep -vi polkitd |grep -vi system-`
do

if cat /etc/VpsPackdir/limite/$users > /dev/null 2> /dev/null
then
limitecs=$(cat /etc/VpsPackdir/limite/$users)
else
limitecs="null"
fi

if  senha=$(cat /etc/VpsPackdir/senha/$users > /dev/null 2> /dev/null)
then
senha=$(cat /etc/VpsPackdir/senha/$users)
else
senha="null"
fi

data=$(chage -l $users |grep -i co |awk -F : '{print $2}')
if [ $data = never ] 2> /dev/null
then
date="Nunca"
fi
detalhesdata=$(printf '%-18s' "$data")
detalheslimit=$(printf '%-10s' "$limitecs")
detalhes=$(printf ' %-21s' "$users")
detalhespass=$(printf '%-18s' "$senha")
echo -e "\033[1;33m$detalhes $detalhespass $detalhesdata $detalheslimit\033[0m"
echo -e "\033[1;30m----------------------------------------------------------------------\033[0m"
done
}
function restaurar_usuarios(){
echo -n "Escriba el directorio al archivo de respaldo de usuarios: "
read arq
echo -e "\033[1;37mRestaurando usuarios...\033[0m"

for user in `cat $arq`
do
usuario=$(echo "$user" |awk -F : '{print $1}')
senha=$(echo "$user" |awk -F : '{print $2}')
if cat /etc/passwd |grep $usuario: 1> /dev/null 2>/dev/null
then
echo " " > /dev/null
else
echo "$user" |cut -d: -f3 1> /dev/null 2>/dev/null
  if [ $? = 0 ]
  then
  limite=$(echo "$user" |awk -F : '{print $3}')
  useradd -M -s /bin/false $usuario
  (echo $senha ; echo $senha) | passwd $usuario > /dev/null 2> /dev/null
  limit $usuario $limite 1> /dev/null 2> /dev/null
  echo "$senha" > /etc/gerenciadorinfo/senha/$usuario
  else
  useradd -M -s /bin/false $usuario
  (echo $senha ; echo $senha) | passwd $usuario > /dev/null 2> /dev/null
  echo "$senha" > /etc/gerenciadorinfo/senha/$usuario
  fi
  echo -e "\033[1;37mUsuario: \033[1;31m$usuario \033[1;37mBackup: [\033[1;31mOk\033[1;37m]\033[0m"
fi
done
}
function banner(){
sshd_config_bak=$(cat /etc/ssh/sshd_config |grep -v "Banner")
echo "$sshd_config_bak" > /etc/ssh/sshd_config
echo "Banner /etc/bannerssh" >> /etc/ssh/sshd_config
service ssh restart 1>/dev/null 2>/dev/null
service sshd restart 1>/dev/null 2>/dev/null
if [ -f /etc/bannerssh ]
then
banner=$(cat /etc/bannerssh)
else
banner="No hay un banner por ahora"
fi
echo -e "\033[1;32mBanner actual:\n\n\033[1;37m$banner\n\033[0m"
echo "Escriba el banner que desea agregar (Presione Ctrl + C para salir)"
read -p ": " bannerssh
echo "$bannerssh" > /etc/bannerssh
service ssh restart 1> /dev/null 2>/dev/null
service sshd restart 1>/dev/null 2>/dev/null
}
function deletar_todos(){
for user in $(cat /etc/passwd |awk -F : '$3 > 900 {print $1}' |grep -v "rick" |grep -vi "nobody")
do
userpid=$(ps -u $user |awk {'print $1'})
kill "$userpid" 2>/dev/null
userdel $user
echo "$user eliminado"
done
}
clear
if [[ $1 == "" ]]
then
ip=$(ip addr | grep 'state UP' -A2 | tail -n1 | awk '{print $2}' | cut -f1  -d'/')
echo -e "\033[1;37m       VPS Panel v1.1 por DragoonDan \033[0m \033[1;33m[\033[1;32m$ip\033[1;33m]"
echo -e "\033[1;37mElija una opcion:    Presione Ctrl + C para salir\033[1;33m
[\033[1;36m01\033[1;33m] Instalar Squid/SSH server \033[1;30m(Instalacion y configuracion)\033[1;33m
[\033[1;36m02\033[1;33m] Instalar BadVPN \033[1;30m(Instalacion de BadVPN para tunnel UDP)\033[1;33m
[\033[1;36m03\033[1;33m] Ejecutar BadVPN \033[1;30m(Activa llamadas VOIP, juegos online, etc)\033[1;33m
[\033[1;36m04\033[1;33m] Detener BadVPN \033[1;30m(Desactiva llamadas VOIP, juegos online, etc)\033[1;33m
[\033[1;36m05\033[1;33m] Crear usuario \033[1;30m(Crea nueva cuenta SSH)\033[1;33m
[\033[1;36m06\033[1;33m] Crear usuario de pruebas \033[1;30m(Crea usuario de corta duracion)\033[1;33m
[\033[1;36m07\033[1;33m] Modificar usuario \033[1;30m(Modifica fecha, contrasena, logins de un usuario)\033[1;33m
[\033[1;36m08\033[1;33m] Cambiar nombre de usuario \033[1;30m(Cambia el nombre de usuario)\033[1;33m
[\033[1;36m09\033[1;33m] Eliminar usuario \033[1;30m(Elimina o desconecta a un usuario)\033[1;33m
[\033[1;36m10\033[1;33m] Monitorear \033[1;30m(Monitorea conexiones actuales)\033[0m\033[1;33m
[\033[1;36m11\033[1;33m] Informacion de usuarios \033[1;30m(Muestra detalles sobre los usuarios)\033[1;33m
[\033[1;36m12\033[1;33m] Eliminar expirados \033[1;30m(Elimina usuarios con configuracion vencida)\033[1;33m
[\033[1;36m13\033[1;33m] Limite \033[1;30m(Modifica el limite de conexiones simultaneas)\033[1;33m
[\033[1;36m14\033[1;33m] Eliminar limite \033[1;30m(Elimina el limite de conexiones de un usuario)\033[1;33m
[\033[1;36m15\033[1;33m] Bloquear firewall \033[1;30m(Bloquea torrent, ICMP [\033[1;31mCUIDADO\033[1;30m])\033[1;33m
[\033[1;36m16\033[1;33m] Reestablecer firewall \033[1;30m(Restaura las reglas iptables [\033[1;31mCUIDADO\033[1;30m])\033[1;33m
[\033[1;36m17\033[1;33m] Agregar host \033[1;30m(Agrega host aceptados por Squid)\033[1;33m
[\033[1;36m18\033[1;33m] Eliminar host \033[1;30m(Elimina host aceptados por Squid)\033[1;33m
[\033[1;36m19\033[1;33m] Respaldar usuarios \033[1;30m(Crea copia de seguridad de los usuarios)\033[1;33m
[\033[1;36m20\033[1;33m] Restaurar usuarios \033[1;30m(Restaura usuarios desde el respaldo)\033[1;33m
[\033[1;36m21\033[1;33m] Banner \033[1;30m(Crea/Modifica mensaje HTML de conexion al servidor)\033[1;33m
[\033[1;36m22\033[1;33m] Speedtest \033[1;30m(Test de velocidad de conexion a internet)\033[1;33m
[\033[1;36m23\033[1;33m] Informacion del sistema \033[1;30m(Muestra detalles sobre el sistema)\033[1;33m
[\033[1;36m24\033[1;33m] Eliminar usuarios \033[1;30m(Elimina a TODOS los usuarios)\033[1;33m
[\033[1;36m25\033[1;33m] Desinstalar \033[1;30m(Elimina este VPS Panel)\033[0m"
read -p ": " opcao
else
opcao=$1
fi
case $opcao in
  1 | 01 )
   configurarsquid;;
  2 | 02 )
   badvpn_install;;
  3 | 03 )
   badvpn start;;
  4 | 04 )
   badvpn stop;;
  5 | 05 )
   crearusuario;;
  6 | 06 )
   criarusuarioteste;;
  7 | 07 )
   modificarusuario;;
  8 | 08 )
   mudarnome;;
  9 | 09 )
   eliminarusuario;;
  10)
   monitorar;;
  11)
   detalhes_usuarios;;
  12)
   removerexpirados;;
  13)
   read -p "Escriba el nombre de usuario a modificar: " user
   read -p "Escriba el nuevo limite de conexiones simultaneas: " limite
   limite $user $limite;;
  14)
   removerlimite;;
  15)
   firewallblock;;
  16)
   resetfirewall;;
  17)
   addhost;;
  18)
   removerhost;;
  19)
   backup_de_usuarios;;
  20)
   restaurar_usuarios;;
  21)
   banner;;
  22)
   speedtest.py;;
  23)
   sistemadetalhes;;
  24)
   deletar_todos;;
  25)
   rm -rf /bin/speedtest.py 2>/dev/null
   rm -rf /bin/eliminarusuario 2>/dev/null
   rm -rf /bin/modificarusuario 2>/dev/null
   rm -rf /bin/limite 2>/dev/null
   rm -rf /bin/crearusuario 2>/dev/null
   rm -rf /bin/opciones 2>/dev/null;;
esac
